#!/usr/bin/env bash
# ddos_walkthrough.sh
# Educational script: explains Distributed Denial of Service (DDoS) basics and why it matters.
# Defensive/educational only — no attack payloads, exploit steps, or orchestration tips.

echo -e "DDoS — conceptual walkthrough\n"
sleep 2

echo -e "What is a DDoS?\n"
sleep 1
echo -e "A Distributed Denial of Service (DDoS) attack aims to make a service\nunavailable to legitimate users by overwhelming it with traffic, requests,\nor resource exhaustion from many sources. 'Distributed' means the\ntraffic originates from many machines (compromised devices, cloud hosts,\nor purpose-built appliances) or many connections, making mitigation\nharder than a single-source (DoS) attack.\n"
sleep 6

echo -e "Why does it happen?\n"
sleep 1
echo -e "At a high level, DDoS succeeds when an attacker can cause a service\nor its supporting infrastructure (network, compute, storage) to exceed\nits capacity. Typical weak points include:\n\n  - Network bandwidth saturation (ingress bandwidth filled).\n  - State exhaustion (too many TCP connections, sockets, or sessions).\n  - CPU/memory exhaustion (expensive application-layer operations).\n  - Resource limits in downstream systems (databases, caches, auth).\n\nAttackers exploit scale and asymmetry: a small amount of effort can\nconsume a large portion of a target's resources.\n"
sleep 8

echo -e "Common DDoS categories (conceptual)\n"
sleep 1
echo -e " - Volumetric attacks: flood the network link with traffic (e.g., UDP,\n   amplification) to consume bandwidth.\n - Protocol attacks: exploit protocol state to exhaust resources (e.g.,\n   many half-open TCP connections, fragmented packets).\n - Application-layer attacks: send seemingly legitimate requests that\n   consume server-side resources (HTTP floods, expensive search queries).\n\nEach category demands different monitoring and mitigation approaches.\n"
sleep 8

echo -e "High-level indicators of a DDoS (defensive signals)\n"
sleep 1
echo -e " - Sudden spike in total inbound traffic across interfaces or links.\n - Rapid increase in connection counts, socket states, or SYN_RECV.\n - Large numbers of requests from many IPs targeting the same endpoint.\n - High rates of HTTP 429/503 responses, timeouts, or queue drops.\n - Higher error rates or slow responses for legitimate users.\n - Alerts from upstream providers or CDN dashboards about anomalous traffic.\n"
sleep 8

echo -e "How defenders think about mitigation (conceptual)\n"
sleep 1
echo -e "1) Build capacity and resilience\n   - Use scalable infrastructure (CDN, autoscaling, Anycast) so the\n     system can absorb surges.\n\n2) Deploy layers of filtering\n   - Edge filtering, upstream scrubbing, rate limiting, and WAF rules\n     reduce malicious traffic before it reaches origin servers.\n\n3) Protect stateful resources\n   - Use SYN cookies, connection tracking limits, and resource quotas to\n     avoid protocol-state exhaustion.\n\n4) Detect early and fail safe\n   - Fast anomaly detection + blackholing / sinkholing decisions (with\n     care to avoid collateral damage) can reduce impact.\n\n5) Use upstream partners\n   - ISPs, CDNs, and specialized scrubbing services can absorb and\n     filter large volumetric attacks.\n"
sleep 12

echo -e "Defensive patterns (pseudocode / conceptual)\n"
sleep 1
cat <<'DEF'
  // PSEUDOCODE — defensive ideas (not executable)
  monitor = start_monitoring()          // measure traffic, connections, errors
  if monitor.spike_total_bytes() > threshold:
      enable_rate_limiting(edge)
      enable_waf_rules(targeted_endpoints)
      notify_incident_response()

  // Protect stateful services:
  if tcp_half_open_connections() > safe_limit:
      enable_syn_cookies()
      increase_conn_timeout_limits()

  // Application-layer throttling:
  for client in top_talkers():
      if client.requests_per_minute > allowed_rate:
          throttle(client)
DEF
sleep 8

echo -e "Specific mitigation controls (defensive)\n"
sleep 1
echo -e " - Content Delivery Networks (CDNs) and Anycast: absorb traffic across\n   many edge nodes and reduce load on origin.\n - Rate limiting: throttle excessive request rates per IP or per token.\n - Web Application Firewalls (WAFs): drop suspicious application-layer\n   request patterns.\n - Upstream scrubbing services: route traffic through a scrubbing provider\n   that filters malicious traffic and forwards clean traffic.\n - Network-level measures: access-control lists (ACLs), blackholing,\n   or filtering at ISP/peering points (used carefully to avoid\n   collateral damage).\n - Autoscaling + graceful degradation: scale stateless tiers and\n   fail nonessential features to keep critical functionality up.\n"
sleep 12

echo -e "Monitoring & incident response (operational)\n"
sleep 1
echo -e " - Have clear runbooks for detection, communication, and mitigation.\n - Telemetry: collect flow data, request logs, connection states,\n   and application metrics for triage.\n - Communication: inform stakeholders and customers promptly with\n   status and expected remediation steps.\n - Post-incident: preserve logs, analyze root causes, and update\n   defenses and thresholds.\n"
sleep 8

echo -e "Safe testing & ethical practice\n"
sleep 1
echo -e " - Do NOT test DDoS against systems you do not own or lack explicit\n   written permission to test. DDoS is illegal and harmful.\n - For training, use isolated lab environments, simulated networks,\n   or vendor-provided test ranges designed for load testing.\n - Use traffic generators that are allowed in your lab and carefully\n   measure effects; never generate uncontrolled traffic on the public\n   internet.\n"
sleep 8

echo -e "When to engage upstream providers\n"
sleep 1
echo -e " - If the volume exceeds your edge capacity, contact your ISP or CDN\n   partner immediately — they can often reroute or scrub traffic.\n - Establish contacts and procedures in advance so escalations are\n   fast during real incidents.\n"
sleep 6

echo -e "Example defensive snippets (conceptual)\n"
sleep 1
cat <<'SNIPPET'
  // Rate limiting example (conceptual)
  limit = 100  // requests per minute per IP
  if requests_from(ip) > limit:
      increment_block_counter(ip)
      if block_counter(ip) > 3:
          temporarily_ban(ip)

  // Health check redirect for overloaded components:
  if queue_length > safe_threshold:
      return 503 (Service Unavailable) with Retry-After header
SNIPPET
sleep 8

echo -e "Resources & further reading (defensive)\n"
sleep 1
echo -e " - Cloud/CDN providers' DDoS guides (read vendor docs for mitigation\n   options and runbooks).\n - IETF and RFCs on TCP/IP robustness and rate limiting concepts.\n - SANS/OWASP materials on availability and incident response.\n - Academic papers and vendor whitepapers on amplification and\n   volumetric mitigation strategies.\n\n(Use official vendor docs and reputable sources for up-to-date guidance.)\n"
sleep 8

echo -e "Final reminders\n"
sleep 1
echo -e " - Design systems with availability in mind: redundancy, rate limiting,\n   and safe failure modes.\n - Practice incident response in tabletop exercises and update\n   defensive configurations regularly.\n - Always act lawfully and ethically; rely on labs and approved testbeds\n   for experiments.\n"
sleep 4

echo -e "\nEnd of DDoS basics walkthrough. Stay defensive, stay ethical.\n"
